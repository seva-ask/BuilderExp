apply plugin: 'com.android.application'

android {
    compileSdkVersion 22
    buildToolsVersion "22.0.1"

    defaultConfig {
        applicationId "com.example.builderexp"
        minSdkVersion 14
        targetSdkVersion 22
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile project(':libraries:base-library:base-library')
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:22.2.0'
}

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'de.aaschmid.gradle.plugins:gradle-cpd-plugin:0.4'
    }
}

apply plugin: 'findbugs'
apply plugin: 'checkstyle'
apply plugin: 'pmd'
apply plugin: 'cpd'

android {
    lintOptions {
        checkAllWarnings true
        warningsAsErrors true
        xmlReport false
        lintConfig file("${rootDir}/libraries/BuildScripts/lint/lint.xml")
    }
}

task findbugs(type: FindBugs, dependsOn: assembleRelease) {
    ignoreFailures = false
    effort = "max"
    reportLevel = "low"
    excludeFilter = file("${rootDir}/libraries/BuildScripts/findbugs/filters/findbugs-filter.xml")
    classes = files("${project.projectDir}/build/intermediates/classes")
    source = fileTree('src/main/java/')
    classpath = files()
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

def checkstyleWarningsFile = "${project.buildDir}/reports/checkstyle/checkstyle.xml"

task checkstyle(type: Checkstyle, dependsOn: assembleRelease) {
    ignoreFailures = false
    showViolations = true
    configFile file("${rootDir}/libraries/BuildScripts/checkstyle/configuration/google_checks.xml")
    source fileTree('src/main/java/')
    checkstyleClasspath = fileTree("${rootDir}/libraries/BuildScripts/checkstyle/")
    classpath = files()
    reports {
        xml {
            destination checkstyleWarningsFile
        }
    }
    finalizedBy 'verifyNoCheckstyleWarnings'
}

task verifyNoCheckstyleWarnings(type: GradleBuild) {
    doLast {
        File warningsFile = file(checkstyleWarningsFile)
        if (warningsFile.exists() && warningsFile.text.contains("<error ")) {
            throw new GradleException("There are checkstyle warnings! For more info see build log.")
        }
    }
}

task pmd(type: Pmd) {
    pmdClasspath = fileTree("${rootDir}/libraries/BuildScripts/pmd/")
    ruleSetFiles = files("${rootDir}/libraries/BuildScripts/pmd/rulesets/java.xml")
    source fileTree('src/main/java/')
    ignoreFailures = false
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

cpdCheck {
    reports {
        text.enabled = true
        xml.enabled = false
        text {
            destination "${project.buildDir}/reports/cpd/cpd.txt"
        }
    }
    source = fileTree('src/main/java/')
}

gradle.projectsEvaluated {
    def compileReleaseTask = tasks.matching{it.getName().contains("compile") && it.getName().contains("Release") && it.getName().contains("Java") && !it.getName().contains("UnitTest")}.last()
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation" << "-Werror"
    }
    tasks.withType(FindBugs) {
        classpath = compileReleaseTask.classpath +\
                    files(System.getenv("ANDROID_HOME") + "/platforms/" + android.compileSdkVersion + "/android.jar") +\
                    files(System.properties.'java.home' + "/lib/rt.jar")
    }
    tasks.withType(Checkstyle) {
        classpath = compileReleaseTask.classpath
    }
}
